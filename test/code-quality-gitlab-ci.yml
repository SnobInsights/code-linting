.code_quality: # this is the job name, so not confused with this, you can add your job name like code_quality_job
  stage: test
  image: docker:stable # you can assign your docker version like this docker:18.09.7
  variables:
    DOCKER_DRIVER: overlay2
    SP_VERSION: 0.85.6
  allow_failure: true
  services:
    - docker:stable-dind
  before_script:
    - docker images
  rules:
    - if: $CI_COMMIT_TAG == null
  script:
    - docker run
      --env SOURCE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/ci-cd/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 10 weeks # this is the expire time of code quality artificats

code_quality_analysis:
    extends: .code_quality
    rules:
      - if: $APP_CODE_QUALITY_JOB != "true" # this varable defined in the .gitlab-ci.yml file to activate this job
        when: never
      - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" # CI_MERGE_REQUEST_TARGET_BRANCH_NAME variable provided by docker in gitLab ci/cd
      - if: $CI_COMMIT_BRANCH == "master" # CI_COMMIT_BRANCH variable provided by docker in gitLab ci/cd
      # this means its only runs for master not for other branch means of you are providing MR to master then this 
      # pipeline runs else its doesn't